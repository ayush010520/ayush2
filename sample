
#include <stdio.h>
#include <string.h>

#define MAX_STUDENTS 100
#define MAX_COURSES 10

typedef struct {
    char name[50];
    int id;
    int courses[MAX_COURSES];
    int course_count;
} Student;

typedef struct {
    char name[50];
    int id;
} Course;

Student students[MAX_STUDENTS];
Course courses[MAX_COURSES];
int student_count = 0;
int course_count = 0;

void add_student() {
    if (student_count < MAX_STUDENTS) {
        printf("Enter student name: ");
        scanf("%s", students[student_count].name);
        students[student_count].id = student_count + 1;
        students[student_count].course_count = 0;
        student_count++;
        printf("Student added successfully.\n");
    } else {
        printf("Maximum number of students reached.\n");
    }
}

void add_course() {
    if (course_count < MAX_COURSES) {
        printf("Enter course name: ");
        scanf("%s", courses[course_count].name);
        courses[course_count].id = course_count + 1;
        course_count++;
        printf("Course added successfully.\n");
    } else {
        printf("Maximum number of courses reached.\n");
    }
}

void enroll_student_in_course() {
    int student_id, course_id;

    printf("Available Students:\n");
    for (int i = 0; i < student_count; i++) {
        printf("ID: %d, Name: %s\n", students[i].id, students[i].name);
    }

    printf("Available Courses:\n");
    for (int i = 0; i < course_count; i++) {
        printf("ID: %d, Name: %s\n", courses[i].id, courses[i].name);
    }

    printf("Enter student ID: ");
    scanf("%d", &student_id);
    printf("Enter course ID: ");
    scanf("%d", &course_id);

    for (int i = 0; i < student_count; i++) {
        if (students[i].id == student_id && students[i].course_count < MAX_COURSES) {
            students[i].courses[students[i].course_count] = course_id;
            students[i].course_count++;
            printf("Student enrolled in course successfully.\n");
            return;
        }
    }
    printf("Student or course not found, or maximum courses reached.\n");
}

void view_student_courses() {
    int student_id;
    printf("Enter student ID: ");
    scanf("%d", &student_id);

    for (int i = 0; i < student_count; i++) {
        if (students[i].id == student_id) {
            printf("Courses for %s:\n", students[i].name);
            for (int j = 0; j < students[i].course_count; j++) {
                int course_id = students[i].courses[j];
                for (int k = 0; k < course_count; k++) {
                    if (courses[k].id == course_id) {
                        printf("  %d: %s\n", courses[k].id, courses[k].name);
                    }
                }
            }
            return;
        }
    }
    printf("Student not found.\n");
}

void view_all_students() {
    printf("List of all students:\n");
    for (int i = 0; i < student_count; i++) {
        printf("ID: %d, Name: %s\n", students[i].id, students[i].name);
    }
}

void view_all_courses() {
    printf("List of all courses:\n");
    for (int i = 0; i < course_count; i++) {
        printf("ID: %d, Name: %s\n", courses[i].id, courses[i].name);
    }
}

void display_menu() {
    printf("\nCourse Registration System\n");
    printf("1. Add Student\n");
    printf("2. Add Course\n");
    printf("3. Enroll Student in Course\n");
    printf("4. View Student Courses\n");
    printf("5. View All Students\n");
    printf("6. View All Courses\n");
    printf("7. Exit\n");
    printf("Enter your choice: ");
}

int main() {
    int choice;

    do {
        display_menu();
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                add_student();
                break;
            case 2:
                add_course();
                break;
            case 3:
                enroll_student_in_course();
                break;
            case 4:
                view_student_courses();
                break;
            case 5:
                view_all_students();
                break;
            case 6:
                view_all_courses();
                break;
            case 7:
                printf("Exiting system.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    } while (choice != 7);

    return 0;
}
